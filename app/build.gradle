plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.7"
    //reportsDirectory = file("${buildDir}/jacoco/")
}

project.afterEvaluate {
    if (android.hasProperty("applicationVariants")) {
        android.applicationVariants.all { variant ->
            createVariantCoverage(variant)
        }
    } else if (android.hasProperty("libraryVariants")) {
        android.libraryVariants.all { variant ->
            createVariantCoverage(variant)
        }
    }
}


def createVariantCoverage(variant) {
    def variantName = variant.name
    def testTaskName = "test${variantName.capitalize()}UnitTest"

    // Add unit test coverage tasks
    tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

        reports {
            html.required = true
            xml.required = true
        }

        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: project.excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: project.excludes)
        getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

        getSourceDirectories().setFrom(files([
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/${variantName}/java",
                "$project.projectDir/src/main/kotlin",
                "$project.projectDir/src/${variantName}/kotlin"
        ]))

        getExecutionData().setFrom(files("${project.buildDir}/outputs/unit_test_code_coverage/${variantName}UnitTest/${testTaskName}.exec"))

        doLast {
            def m = new File("${project.buildDir}/reports/jacoco/${testTaskName}Coverage/html/index.html")
                    .text =~ /Total[^%]*>(\d?\d?\d?%)/
            if (m) {
                println "Test coverage: ${m[0][1]}"
            }
        }
    }

    // Add unit test coverage verification tasks
    tasks.create(name: "${testTaskName}CoverageVerification", type: JacocoCoverageVerification, dependsOn: "${testTaskName}Coverage") {
        group = "Reporting"
        description = "Verifies Jacoco coverage for the ${variantName.capitalize()} build."
        violationRules {
            rule {
                limit {
                    minimum = 0
                }
            }
            rule {
                element = 'BUNDLE'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.30
                }
            }
        }
        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: project.excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: project.excludes)
        getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))
        getSourceDirectories().setFrom(files([
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/${variantName}/java",
                "$project.projectDir/src/main/kotlin",
                "$project.projectDir/src/${variantName}/kotlin"
        ]))
        getExecutionData().setFrom(files("${project.buildDir}/outputs/unit_test_code_coverage/${variantName}UnitTest/${testTaskName}.exec"))
    }
}



ext.excludes = [
        '**/databinding/*Binding.*',
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        // butterKnife
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/Lambda$*.class',
        '**/Lambda.class',
        '**/*Lambda.class',
        '**/*Lambda*.class',
        '**/*_MembersInjector.class',
        '**/Dagger*Component*.*',
        '**/*Module_*Factory.class',
        '**/di/module/*',
        '**/*_Factory*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        // kotlin
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/*Component*.*',
        '**/*BR*.*',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',
        '**/*Companion*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        '**/*MembersInjector*.*',
        '**/*_MembersInjector.class',
        '**/*_Factory*.*',
        '**/*_Provide*Factory*.*',
        '**/*Extensions*.*',
        //'**/utils/*.*',
        '**/utils/DispatcherProvider*.*',
        '**/utils/DefaultDispatcherProvider*.*',
        '**/MyMemoriesSharedPreferences.*',
        '**/adapters/*.*',
        '**/activities/*.*',
        '**/fragments/*.*',
        '**/MemoriesPagingSource.*',
        '**/MyMemoriesApp*.*',
        '**/MemoriesActivityViewModel*.*',
        '**/MemoriesDatabase*.*',
        '**/OkHttpClient*.*',
        '**/Interceptor*.*',
        '**/okhttp3*.*'
]

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.rsoumail.mymemories"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.rsoumail.mymemories.utils.TestApplicationRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

        reports {
            xml.required = true
            html.required = true
        }

        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: project.excludes)
        def mainSrc = "${project.projectDir}/src/main/java"

        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: project.excludes)

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([debugTree], [kotlinDebugTree]))
        executionData.setFrom(fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/debugAndroidTest/connected/*coverage.ec"
        ]))

        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/utils/DispatcherProvider*.*',
                                '**/utils/DefaultDispatcherProvider*.*',
                                '**/MyMemoriesSharedPreferences.*',
                                '**/MemoriesAdapter.*',
                                '**/activities/*.*',
                                '**/fragments/*.*',
                                '**/MemoriesPagingSource.*',
                                '**/MyMemoriesApp*.*',
                                '**/MemoriesActivityViewModel*.*',
                                '**/MemoriesDatabase*.*',
                                '**/OkHttpClient*.*',
                                '**/Interceptor*.*',
                                '**/okhttp3*.*'
                        ]
                )
            })
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
       unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            useJUnitPlatform()
            jvmArgs '-noverify', '-ea'
            jacoco {
                exclude ("*createWebService", "*createOkHttpClient", "*onlineInterceptor", "*offlineInterceptor", "*intercept")
                excludes = ['jdk.internal.*']
                includeNoLocationClasses = true
            }
        }
    }





    packagingOptions {
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }

    allprojects {
        configurations.all {
            resolutionStrategy.force 'org.objenesis:objenesis:2.6'
            resolutionStrategy {
                eachDependency { details ->
                    if ('org.jacoco' == details.requested.group) {
                        details.useVersion "0.8.7"
                    }
                }
            }
        }

    }

}

dependencies {

    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    // Koin for Android
    implementation "io.insert-koin:koin-android:$koin_version"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.google.code.gson:gson:$gson_version"
    //Gson Converter
    implementation "com.squareup.retrofit2:converter-gson:$gson_converter_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    testImplementation 'org.junit.jupiter:junit-jupiter'

    //implementation 'androidx.test:core-ktx:1.4.0'
    // Glide v4 uses this new annotation processor -- see https://bumptech.github.io/glide/doc/generatedapi.html
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    //Facebook shimmer
    implementation "com.facebook.shimmer:shimmer:$shimmer_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    implementation "androidx.room:room-runtime:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    kapt  "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    implementation "androidx.paging:paging-runtime:$paging_version"
    // alternatively - without Android dependencies for tests
    testImplementation "androidx.paging:paging-common:$paging_version"
    //testImplementation "junit:junit:$junit_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // Koin testing tools
    androidTestImplementation "io.insert-koin:koin-test:$koin_version"
    // Needed JUnit version
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    implementation 'androidx.test:runner:1.4.0'
    implementation 'androidx.test:rules:1.4.0'

    testImplementation "io.mockk:mockk:$mockk_verion"
    androidTestImplementation "io.mockk:mockk-android:$mockk_verion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    testImplementation "io.insert-koin:koin-test-junit5:$koin_version"
    androidTestImplementation "io.insert-koin:koin-test-junit5:$koin_version"

    // testImplementation for pure JVM unit tests
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // androidTestImplementation for Android instrumentation tests
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    testImplementation "app.cash.turbine:turbine:$turbine_version"
    testImplementation "com.google.truth:truth:1.1.3"



}